import telegram
from telegram.ext import (Updater, CommandHandler, ConversationHandler, MessageHandler, Filters, CallbackQueryHandler)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import schedule
import time
import json
import threading
import uuid
from datetime import datetime
import os
import pytz
import re

# --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
BOT_TOKEN = os.environ.get('BOT_TOKEN')
allowed_ids_str = os.environ.get('ALLOWED_USER_IDS', '')
ALLOWED_USER_IDS = [int(id.strip()) for id in allowed_ids_str.split(',') if id.strip()]

REMINDERS_FILE = 'reminders.json'
KYIV_TZ = pytz.timezone("Europe/Kyiv")
WEEKDAYS_MAP = {0: '–ø–Ω', 1: '–≤—Ç', 2: '—Å—Ä', 3: '—á—Ç', 4: '–ø—Ç', 5: '—Å–±', 6: '–Ω–¥'}

ADD_GET_MEDIA, ADD_GET_DETAILS = range(2)
NOW_GET_MEDIA, NOW_GET_DETAILS = range(2, 4)

# --- –§–£–ù–ö–¶–Ü–Ø –ü–ï–†–ï–í–Ü–†–ö–ò –î–û–°–¢–£–ü–£ ---
def is_user_allowed(update):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USER_IDS:
        update.message.reply_text("‚õî –í–∏–±–∞—á—Ç–µ, —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return False
    return True

# --- –†–û–ë–û–¢–ê –ó –§–ê–ô–õ–û–ú –ù–ê–ì–ê–î–£–í–ê–ù–¨ ---
def load_reminders():
    try:
        with open(REMINDERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        with open(REMINDERS_FILE, 'w') as f:
            json.dump([], f)
        return []

def save_reminders(reminders):
    with open(REMINDERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(reminders, f, indent=4, ensure_ascii=False)

# --- –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á –ë–û–¢–ê ---
def send_reminder(bot, reminder):
    if reminder.get('excluded_days'):
        current_weekday_kyiv = WEEKDAYS_MAP[datetime.now(KYIV_TZ).weekday()]
        if current_weekday_kyiv in reminder['excluded_days']:
            print(f"[{datetime.now(KYIV_TZ).strftime('%Y-%m-%d %H:%M:%S')}] –ü—Ä–æ–ø—É—â–µ–Ω–æ ID {reminder['id']} (–≤–∏–∫–ª—é—á–µ–Ω–∏–π –¥–µ–Ω—å: {current_weekday_kyiv}).")
            return
    
    chat_ids = reminder.get('chat_ids', [])
    text = reminder['text']
    media_file_id = reminder.get('media_file_id')
    media_type = reminder.get('media_type')
    buttons = reminder.get('buttons')
    
    # --- –û–ù–û–í–õ–ï–ù–û: –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É ---
    keyboard = []
    if buttons:
        # –í—Å—ñ –∫–Ω–æ–ø–∫–∏ –¥–æ–¥–∞—é—Ç—å—Å—è –≤ –æ–¥–∏–Ω –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Å–ø–∏—Å–æ–∫, —â–æ–± –≤–æ–Ω–∏ –±—É–ª–∏ –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É
        keyboard = [[
            InlineKeyboardButton(btn_text, callback_data=f"btn_press:{reminder['id']}:{i}")
            for i, btn_text in enumerate(buttons)
        ]]
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    clean_text = re.sub(r'\[\[.*?\]\]', '', text).strip()

    for chat_id in chat_ids:
        try:
            target_chat_id = int(chat_id)
            if media_file_id:
                if media_type == 'photo':
                    bot.send_photo(chat_id=target_chat_id, photo=media_file_id, caption=clean_text, parse_mode='HTML', reply_markup=reply_markup)
                elif media_type == 'animation':
                    bot.send_animation(chat_id=target_chat_id, animation=media_file_id, caption=clean_text, parse_mode='HTML', reply_markup=reply_markup)
                elif media_type == 'video':
                    bot.send_video(chat_id=target_chat_id, video=media_file_id, caption=clean_text, parse_mode='HTML', reply_markup=reply_markup)
            else:
                bot.send_message(chat_id=target_chat_id, text=clean_text, parse_mode='HTML', reply_markup=reply_markup)
            print(f"[{datetime.now(KYIV_TZ).strftime('%Y-%m-%d %H:%M:%S')}] ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID {reminder.get('id', 'N/A')} —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç {chat_id}")
            time.sleep(0.1)
        except Exception as e:
            print(f"[{datetime.now(KYIV_TZ).strftime('%Y-%m-%d %H:%M:%S')}] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ ID {reminder.get('id', 'N/A')} –≤ —á–∞—Ç {chat_id}: {e}")

def schedule_reminder(bot, reminder):
    job_func = lambda: send_reminder(bot, reminder)
    parts = reminder['schedule_time'].split()
    day_or_freq, local_time_str = parts
    job_tag = reminder['id']
    try:
        hour, minute = map(int, local_time_str.split(':'))
        now_in_kyiv = datetime.now(KYIV_TZ)
        today_in_kyiv_at_time = now_in_kyiv.replace(hour=hour, minute=minute, second=0, microsecond=0)
        utc_dt = today_in_kyiv_at_time.astimezone(pytz.utc)
        utc_time_str = utc_dt.strftime("%H:%M")
        print(f"–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è ID {reminder['id']}: '{reminder['schedule_time']}' -> UTC —á–∞—Å '{utc_time_str}'")
        if day_or_freq.lower() == '—â–æ–¥–Ω—è':
            schedule.every().day.at(utc_time_str).do(job_func).tag(job_tag)
        else:
            days_map = {'—â–æ–ø–æ–Ω–µ–¥—ñ–ª–∫–∞': schedule.every().monday, '—â–æ–≤—ñ–≤—Ç–æ—Ä–∫–∞': schedule.every().tuesday, '—â–æ—Å–µ—Ä–µ–¥–∏': schedule.every().wednesday, '—â–æ—á–µ—Ç–≤–µ—Ä–≥–∞': schedule.every().thursday, '—â–æ–ø\'—è—Ç–Ω–∏—Ü—ñ': schedule.every().friday, '—â–æ—Å—É–±–æ—Ç–∏': schedule.every().saturday, '—â–æ–Ω–µ–¥—ñ–ª—ñ': schedule.every().sunday}
            days_map[day_or_freq.lower()].at(utc_time_str).do(job_func).tag(job_tag)
        return True
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è ID {reminder.get('id', 'N/A')}: {e}")
        return False

# --- –û–ë–†–û–ë–ö–ê –ù–ê–¢–ò–°–ö–ê–ù–ù–Ø –ö–ù–û–ü–û–ö ---
def button_callback(update, context):
    query = update.callback_query
    query.answer()
    
    try:
        action, reminder_id, button_index_str = query.data.split(':')
        button_index = int(button_index_str)
        
        reminders = load_reminders()
        target_reminder = next((r for r in reminders if r['id'] == reminder_id), None)
        
        if not target_reminder:
            query.edit_message_text(text=query.message.text_html + "\n\nü§∑‚Äç‚ôÇÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ü–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.", parse_mode='HTML')
            return

        button_text = target_reminder['buttons'][button_index]
        time_str = datetime.now(KYIV_TZ).strftime('%H:%M:%S')
        
        original_text = query.message.text_html if query.message.text_html else query.message.caption_html
        
        if f"‚úÖ <b>{button_text}</b>" not in original_text:
            new_text = original_text + f"\n‚úÖ <b>{button_text}</b> –≤–∏–∫–æ–Ω–∞–Ω–æ –æ {time_str}"
            # --- –û–ù–û–í–õ–ï–ù–û: –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è ---
            query.edit_message_text(text=new_text, parse_mode='HTML', reply_markup=None)
            
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")

# --- –î–Ü–ê–õ–û–ì–ò –¢–ê –ö–û–ú–ê–ù–î–ò ---
def start_add(update, context):
    if not is_user_allowed(update): return ConversationHandler.END
    update.message.reply_text("–ö—Ä–æ–∫ 1: –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–¥—ñ–∞, –∞–±–æ /skip.")
    return ADD_GET_MEDIA

def get_media_add(update, context):
    media_file = update.message.photo[-1] if update.message.photo else update.message.animation or update.message.video
    context.user_data['media_file_id'] = media_file.file_id
    context.user_data['media_type'] = 'photo' if update.message.photo else 'animation' if update.message.animation else 'video'
    update.message.reply_text("–ö—Ä–æ–∫ 2: –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ:\n<id_—á–∞—Ç—É...> \"<—Ä–æ–∑–∫–ª–∞–¥>\" \"<—Ç–µ–∫—Å—Ç –∑ –∫–Ω–æ–ø–∫–∞–º–∏ [[...]]>\" –≤–∏–∫–ª—é—á–∏—Ç–∏:–¥–Ω,–¥–Ω")
    return ADD_GET_DETAILS

def skip_media_add(update, context):
    context.user_data['media_file_id'] = None
    update.message.reply_text("–ö—Ä–æ–∫ 2: –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ:\n<id_—á–∞—Ç—É...> \"<—Ä–æ–∑–∫–ª–∞–¥>\" \"<—Ç–µ–∫—Å—Ç –∑ –∫–Ω–æ–ø–∫–∞–º–∏ [[...]]>\" –≤–∏–∫–ª—é—á–∏—Ç–∏:–¥–Ω,–¥–Ω")
    return ADD_GET_DETAILS

def get_details_add(update, context):
    try:
        full_command_str = update.message.text
        excluded_days = []
        if ' –≤–∏–∫–ª—é—á–∏—Ç–∏:' in full_command_str:
            parts = full_command
