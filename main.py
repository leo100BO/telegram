import telegram
from telegram.ext import (Updater, CommandHandler, ConversationHandler, MessageHandler, Filters)
import schedule
import time
import json
import threading
import uuid
from datetime import datetime, time as dt_time
import os
import pytz

# --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_ID = int(os.environ.get('ADMIN_ID'))
REMINDERS_FILE = 'reminders.json'
KYIV_TZ = pytz.timezone("Europe/Kyiv")
WEEKDAYS_MAP = {0: '–ø–Ω', 1: '–≤—Ç', 2: '—Å—Ä', 3: '—á—Ç', 4: '–ø—Ç', 5: '—Å–±', 6: '–Ω–¥'}

# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω–∏ –¥–ª—è –¥—ñ–∞–ª–æ–≥—ñ–≤
ADD_GET_MEDIA, ADD_GET_DETAILS = range(2)
NOW_GET_MEDIA, NOW_GET_DETAILS = range(2, 4)

# --- –†–û–ë–û–¢–ê –ó –§–ê–ô–õ–û–ú –ù–ê–ì–ê–î–£–í–ê–ù–¨ ---
def load_reminders():
    try:
        with open(REMINDERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        with open(REMINDERS_FILE, 'w') as f:
            json.dump([], f)
        return []

def save_reminders(reminders):
    with open(REMINDERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(reminders, f, indent=4, ensure_ascii=False)

# --- –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á –ë–û–¢–ê ---
def send_reminder(bot, reminder):
    # --- –û–ù–û–í–õ–ï–ù–û: –î–æ–¥–∞–Ω–æ parse_mode='HTML' ---
    if reminder.get('excluded_days'):
        current_weekday_kyiv = WEEKDAYS_MAP[datetime.now(KYIV_TZ).weekday()]
        if current_weekday_kyiv in reminder['excluded_days']:
            print(f"[{datetime.now(KYIV_TZ).strftime('%Y-%m-%d %H:%M:%S')}] –ü—Ä–æ–ø—É—â–µ–Ω–æ ID {reminder['id']} (–≤–∏–∫–ª—é—á–µ–Ω–∏–π –¥–µ–Ω—å: {current_weekday_kyiv}).")
            return

    chat_id = int(reminder['chat_id'])
    text = reminder['text']
    media_file_id = reminder.get('media_file_id')
    media_type = reminder.get('media_type')

    try:
        if media_file_id:
            if media_type == 'photo':
                bot.send_photo(chat_id=chat_id, photo=media_file_id, caption=text, parse_mode='HTML')
            elif media_type == 'animation':
                bot.send_animation(chat_id=chat_id, animation=media_file_id, caption=text, parse_mode='HTML')
            elif media_type == 'video':
                bot.send_video(chat_id=chat_id, video=media_file_id, caption=text, parse_mode='HTML')
        else:
            bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')
        print(f"[{datetime.now(KYIV_TZ).strftime('%Y-%m-%d %H:%M:%S')}] ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID {reminder['id']} —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        print(f"[{datetime.now(KYIV_TZ).strftime('%Y-%m-%d %H:%M:%S')}] ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ ID {reminder['id']} –≤ —á–∞—Ç {chat_id}: {e}")

def schedule_reminder(bot, reminder):
    job_func = lambda: send_reminder(bot, reminder)
    parts = reminder['schedule_time'].split()
    day_or_freq, local_time_str = parts
    job_tag = reminder['id']

    try:
        hour, minute = map(int, local_time_str.split(':'))
        now_in_kyiv = datetime.now(KYIV_TZ)
        today_in_kyiv_at_time = now_in_kyiv.replace(hour=hour, minute=minute, second=0, microsecond=0)
        utc_dt = today_in_kyiv_at_time.astimezone(pytz.utc)
        utc_time_str = utc_dt.strftime("%H:%M")

        print(f"–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è ID {reminder['id']}: –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å '{local_time_str}' -> UTC —á–∞—Å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ '{utc_time_str}'")

        if day_or_freq.lower() == '—â–æ–¥–Ω—è':
            schedule.every().day.at(utc_time_str).do(job_func).tag(job_tag)
        else:
            days_map = {'—â–æ–ø–æ–Ω–µ–¥—ñ–ª–∫–∞': schedule.every().monday, '—â–æ–≤—ñ–≤—Ç–æ—Ä–∫–∞': schedule.every().tuesday, '—â–æ—Å–µ—Ä–µ–¥–∏': schedule.every().wednesday, '—â–æ—á–µ—Ç–≤–µ—Ä–≥–∞': schedule.every().thursday, '—â–æ–ø\'—è—Ç–Ω–∏—Ü—ñ': schedule.every().friday, '—â–æ—Å—É–±–æ—Ç–∏': schedule.every().saturday, '—â–æ–Ω–µ–¥—ñ–ª—ñ': schedule.every().sunday}
            days_map[day_or_freq.lower()].at(utc_time_str).do(job_func).tag(job_tag)
        return True
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è ID {reminder.get('id', 'N/A')}: {e}")
        return False

# --- –î–Ü–ê–õ–û–ì–ò –¢–ê –ö–û–ú–ê–ù–î–ò ---
def start_add(update, context):
    if update.effective_user.id != ADMIN_ID: return ConversationHandler.END
    update.message.reply_text("–ö—Ä–æ–∫ 1: –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ/GIF/–≤—ñ–¥–µ–æ, –∞–±–æ /skip, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏.\n\n–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å /cancel.")
    return ADD_GET_MEDIA

def get_media_add(update, context):
    media_file = update.message.photo[-1] if update.message.photo else update.message.animation or update.message.video
    context.user_data['media_file_id'] = media_file.file_id
    context.user_data['media_type'] = 'photo' if update.message.photo else 'animation' if update.message.animation else 'video'
    update.message.reply_text("–ö—Ä–æ–∫ 2: –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ: `<id_—á–∞—Ç—É> \"<—Ä–æ–∑–∫–ª–∞–¥>\" \"<—Ç–µ–∫—Å—Ç>\" [–≤–∏–∫–ª—é—á–∏—Ç–∏:–¥–Ω,–¥–Ω]`")
    return ADD_GET_DETAILS

def skip_media_add(update, context):
    context.user_data['media_file_id'] = None
    update.message.reply_text("–ö—Ä–æ–∫ 2: –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ: `<id_—á–∞—Ç—É> \"<—Ä–æ–∑–∫–ª–∞–¥>\" \"<—Ç–µ–∫—Å—Ç>\" [–≤–∏–∫–ª—é—á–∏—Ç–∏:–¥–Ω,–¥–Ω]`")
    return ADD_GET_DETAILS

def get_details_add(update, context):
    try:
        full_command_str = update.message.text
        excluded_days = []
        if '–≤–∏–∫–ª—é—á–∏—Ç–∏:' in full_command_str:
            parts = full_command_str.split(' –≤–∏–∫–ª—é—á–∏—Ç–∏:')
            full_command_str = parts[0]
            excluded_days = parts[1].strip().split(',')
        chat_id_part, rest_of_string = full_command_str.split(' ', 1)
        chat_id = chat_id_part.strip()
        parts = rest_of_string.split('"')
        schedule_time = parts[1]
        text = parts[3]
        new_reminder = {'id': str(uuid.uuid4())[:8], 'chat_id': chat_id, 'schedule_time': schedule_time, 'text': text, 'excluded_days': excluded_days, 'media_file_id': context.user_data.get('media_file_id'), 'media_type': context.user_data.get('media_type')}
        if not schedule_reminder(context.bot, new_reminder): raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É/—Ä–æ–∑–∫–ª–∞–¥—É.")
    except Exception as e:
        update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}\n–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∞–±–æ /cancel.")
        return ADD_GET_DETAILS
    reminders = load_reminders()
    reminders.append(new_reminder)
    save_reminders(reminders)
    update.message.reply_text(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ID `{new_reminder['id']}` —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

def start_now(update, context):
    if update.effective_user.id != ADMIN_ID: return ConversationHandler.END
    update.message.reply_text("–ö—Ä–æ–∫ 1: –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ/GIF/–≤—ñ–¥–µ–æ –¥–ª—è –º–∏—Ç—Ç—î–≤–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏, –∞–±–æ /skip.\n\n–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å /cancel.")
    return NOW_GET_MEDIA

def get_media_now(update, context):
    media_file = update.message.photo[-1] if update.message.photo else update.message.animation or update.message.video
    context.user_data['media_file_id'] = media_file.file_id
    context.user_data['media_type'] = 'photo' if update.message.photo else 'animation' if update.message.animation else 'video'
    update.message.reply_text("–ö—Ä–æ–∫ 2: –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: `<id_—á–∞—Ç—É> \"<—Ç–µ–∫—Å—Ç>\"`")
    return NOW_GET_DETAILS

def skip_media_now(update, context):
    context.user_data['media_file_id'] = None
    update.message.reply_text("–ö—Ä–æ–∫ 2: –ù–∞–¥—ñ—à–ª—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: `<id_—á–∞—Ç—É> \"<—Ç–µ–∫—Å—Ç>\"`")
    return NOW_GET_DETAILS

def get_details_now(update, context):
    try:
        full_command_str = update.message.text
        chat_id_part, rest_of_string = full_command_str.split(' ', 1)
        chat_id = chat_id_part.strip()
        text = rest_of_string.split('"')[1]
        instant_reminder = {'id': 'now', 'chat_id': chat_id, 'text': text, 'media_file_id': context.user_data.get('media_file_id'), 'media_type': context.user_data.get('media_type')}
        send_reminder(context.bot, instant_reminder)
        update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e:
        update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}\n–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∞–±–æ /cancel.")
        return NOW_GET_DETAILS
    context.user_data.clear()
    return ConversationHandler.END

def cancel(update, context):
    update.message.reply_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

def start(update, context):
    user_id = update.effective_user.id
    update.message.reply_text(f"üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.\n–í–∞—à Telegram ID: `{user_id}`")
    if user_id == ADMIN_ID:
        show_help(update, context)

def show_help(update, context):
    """–ù–∞–¥—Å–∏–ª–∞—î –¥–æ–≤—ñ–¥–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    help_text = (
        "*–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n\n"
        "`/add` - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.\n\n"
        "`/now` - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥ –¥–ª—è –º–∏—Ç—Ç—î–≤–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n\n"
        "`/list` - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å.\n\n"
        "`/delete <ID>` - –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: `/delete 1a2b3c4d`\n\n"
        "`/cancel` - –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é (`/add` –∞–±–æ `/now`).\n\n"
        "`/help` - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É.\n\n"
        "–î–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ HTML-—Ç–µ–≥–∏:\n"
        "`<b>–∂–∏—Ä–Ω–∏–π</b>`, `<i>–∫—É—Ä—Å–∏–≤</i>`, `<u>–ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–∏–π</u>`."
    )
    update.message.reply_text(help_text, parse_mode='Markdown')

def list_reminders(update, context):
    if update.effective_user.id != ADMIN_ID: return
    reminders = load_reminders()
    if not reminders:
        update.message.reply_text("–°–ø–∏—Å–æ–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø–æ—Ä–æ–∂–Ω—ñ–π."); return
    message = "üìã *–ê–∫—Ç–∏–≤–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:*\n\n"
    for r in reminders:
        message += f"*ID:* `{r['id']}`\n*–ß–∞—Ç:* `{r['chat_id']}`\n*–†–æ–∑–∫–ª–∞–¥:* `{r['schedule_time']}`\n"
        if r.get('excluded_days'): message += f"*–í–∏–∫–ª—é—á–µ–Ω—ñ –¥–Ω—ñ:* {', '.join(r['excluded_days'])}\n"
        message += f"*–¢–µ–∫—Å—Ç:* _{r['text']}_\n"
        if r.get('media_file_id'): message += f"*–ú–µ–¥—ñ–∞:* –ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ\n"
        message += "--------------------\n"
    update.message.reply_text(message, parse_mode='Markdown')

def delete_reminder(update, context):
    if update.effective_user.id != ADMIN_ID: return
    try: reminder_id_to_delete = context.args[0]
    except IndexError:
        update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å ID –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.", parse_mode='Markdown'); return
    reminders = load_reminders()
    new_reminders = [r for r in reminders if r['id'] != reminder_id_to_delete]
    if len(new_reminders) < len(reminders):
        save_reminders(new_reminders); schedule.clear(reminder_id_to_delete)
        update.message.reply_text(f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ID `{reminder_id_to_delete}` –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        update.message.reply_text(f"ü§∑‚Äç‚ôÇÔ∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ID `{reminder_id_to_delete}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    add_conv = ConversationHandler(entry_points=[CommandHandler('add', start_add)], states={ADD_GET_MEDIA: [MessageHandler(Filters.photo | Filters.video | Filters.animation, get_media_add), CommandHandler('skip', skip_media_add)], ADD_GET_DETAILS: [MessageHandler(Filters.text & ~Filters.command, get_details_add)]}, fallbacks=[CommandHandler('cancel', cancel)])
    now_conv = ConversationHandler(entry_points=[CommandHandler('now', start_now)], states={NOW_GET_MEDIA: [MessageHandler(Filters.photo | Filters.video | Filters.animation, get_media_now), CommandHandler('skip', skip_media_now)], NOW_GET_DETAILS: [MessageHandler(Filters.text & ~Filters.command, get_details_now)]}, fallbacks=[CommandHandler('cancel', cancel)])

    dp.add_handler(add_conv)
    dp.add_handler(now_conv)
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", show_help))
    dp.add_handler(CommandHandler("list", list_reminders))
    dp.add_handler(CommandHandler("delete", delete_reminder))

    print("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å...")
    for r in load_reminders():
        try: schedule_reminder(updater.bot, r)
        except Exception as e: print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ID {r.get('id', 'N/A')}: {e}")

    print("–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    thread = threading.Thread(target=run_scheduler); thread.daemon = True; thread.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    updater.start_polling()
    updater.idle()
  
if __name__ == '__main__':
    main()